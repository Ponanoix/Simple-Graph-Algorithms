//
// Created by Ponanoix on 04.06.2023.
//

#ifndef SDIZO2_BENCHMARK_H
#define SDIZO2_BENCHMARK_H

#include<windows.h>
#include<string>
#include<iostream>
#include<random>
#include"alg-type.h"
#include"graph-representations/matrix-representation.h"
#include"graph-representations/list-representation.h"
#include"input-output/csvwriter.h"
#include "algorithms/prims/prims-list.h"
#include "algorithms/prims/prims-matrix.h"
#include "algorithms/kruskal/kruskal-list.h"
#include "algorithms/kruskal/kruskal-matrix.h"
#include "algorithms/ford-fulkerson/ford-fulkerson-list.h"
#include "algorithms/ford-fulkerson/ford-fulkerson-matrix.h"
#include "algorithms/dijkstra/dijkstra-list.h"
#include "algorithms/dijkstra/dijkstra-matrix.h"
#include "algorithms/bellman-ford/bellman-ford-list.h"
#include "algorithms/bellman-ford/bellman-ford-matrix.h"

using namespace std;

class Benchmark{
private:
    LARGE_INTEGER *performanceCounter;
    mt19937 randNumGen;
    uniform_int_distribution<int> numberDistribution;
    AlgType type;

    int testNumber;                                                         // Number of times the tests should be carried out

    int initialSize;                                                        // Initial size to begin tests

    int step;                                                               // Step to increment size by every iteration

    float multiplier;                                                       // Multiplier to multiply size by every iteration

    int maxSize;                                                            // Max size to be reached

    int iterationNumber{};                                                  // Expected iteration number;

    bool isWriteToFile;                                                     // Should it produce output to .csv

    void startTimer();                                                      // Starts counting time

    double stopTimer();                                                     // Stops counting time and returns it in [Î¼s]

    void calcIterationNumber();                                             // Calculates number of required iterations to meet input requirements

    int getNextRandom(uniform_int_distribution<int> &dist);                 // Gets next random int number generated by given distribution

    static uniform_int_distribution<int> getRandomInRange(int a, int b);    // Gets random number in a given range generated by given distribution

    void writeToFile(string testName, const double* resultArrayMatrix25,
                     const double* resultArrayList25, const double* resultArrayMatrix50,
                     const double* resultArrayList50, const double* resultArrayMatrix75,
                     const double* resultArrayList75, const double* resultArrayMatrix99,
                     const double* resultArrayList99, const int* size) const;                 // The function that prepares data and sends it to csvwriter
public:
    Benchmark(AlgType type, bool writeToFile, int initialSize, int step, float multiplier, int testNumber, int maxSize);

    void startTest();

    void generatePopulation(double d, MatrixRepresentation *mRepresentation, ListRepresentation *lRepresentation1, bool directed, int vertexSize);
};

#endif //SDIZO2_BENCHMARK_H
